

//RECURSION

// Problem #2
// Write a recursive function that concatenates "red green refactor" to a string X number of times, where X is the argument passed into the function. rgr(3) should return the following:

// "red green refactor red green refactor red green refactor"

const rgr = (x) => {

  if (x === 0) {
    return "";
  } else {
    console.log("x = " + x)
    x--
    console.log("x-- = " + x)
    return rgr(x) + "red green refactor ";
  }
} 

rgr(3)

// Problem #1
// Write a recursive function that reverses the order of words in a sentence. For instance, "I am a cat" should become "cat a am I".

let string = "I am a cat"
let array = string.split(' ');

const reverseString = (string) => {
  if (string.length === 0) {
    return string;
 } else {
  console.log(string)
  console.log(string[0])
  return reverseString(string.slice(1, array.length)) + " " + string[0];
  }
}

reverseString(array)



//CURRYING AND CLOSURES

// Use closures to create multiple functions to first add to and then multiply a value. It should be possible to do the following:

// const addTwoMultiplyByThree = addaMult(2)(3);
// const addFiveMultiplyByNine = addaMult(5)(9);


const addaMult = initialValue => {
  return function(addedValue) {
    return function(multipliedValue) {
      return (initialValue + addedValue) * multipliedValue;
    }
  }
}

const testOne = addaMult(1);
testOne(2)(3);

addaMult(1)(2)(3);

const testTwo = addaMult(2);
testTwo(2)(3);


// Use closures to create multiple functions for adding both a prefix and a suffix to a name. For example, it should be possible to do the following:
// const misterJunior = nameEnhancer("Mister")("Junior");
// const duchessThird = nameEnhancer("Duchess")("The Third");

const nameEnhancer = name => {
  return function(prefix) {
    return function(suffix) {
      return `Please welcome to the stage, ${prefix} ${name} ${suffix}!`;
    }
  }
}

nameEnhancer("Laurie")("Dr.")("The Third")

const me = nameEnhancer("Laurie");
me("President")("The Honorable")



//closures

//Use a closure to create multiple functions for adding a prefix to a name. The prefix could be Doctor, Duchess, Sir, and so on.
//It should be possible to create a new prefix function like this:
//const prefixSir = addPrefix("Sir");


const addPrefix = (name) => {
  return function(prefix) {
    return `Welcome to our restaurant, ${prefix} ${name}!`;
  }
}

let name = addPrefix("Laurie");
name("Dr.");

//Use a closure to create multiple functions for making various animal noises. For example, it should be possible to do the following:
//const lionSound = soundMaker("roar");
//const mouseSound = soundMaker("squeak");

const soundMaker = animal => {
  return function(sound) {
    return `The ${animal} makes the sound ${sound}.`
  }
}

const lion = soundMaker("lion");
lion("roar");

soundMaker("lamb")("bleet")